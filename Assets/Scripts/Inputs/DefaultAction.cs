//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Inputs/DefaultAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GeometryDash.Inputs
{
    public partial class @DefaultAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultAction"",
    ""maps"": [
        {
            ""name"": ""Cube"",
            ""id"": ""7db73629-bf57-4112-9e2d-8acfaa84912b"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""52f44228-0b1b-452f-a05c-a781b1cab96e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c59e987d-0394-43df-9874-626fa3f0826d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Cube
            m_Cube = asset.FindActionMap("Cube", throwIfNotFound: true);
            m_Cube_Jump = m_Cube.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Cube
        private readonly InputActionMap m_Cube;
        private List<ICubeActions> m_CubeActionsCallbackInterfaces = new List<ICubeActions>();
        private readonly InputAction m_Cube_Jump;
        public struct CubeActions
        {
            private @DefaultAction m_Wrapper;
            public CubeActions(@DefaultAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_Cube_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Cube; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CubeActions set) { return set.Get(); }
            public void AddCallbacks(ICubeActions instance)
            {
                if (instance == null || m_Wrapper.m_CubeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CubeActionsCallbackInterfaces.Add(instance);
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(ICubeActions instance)
            {
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(ICubeActions instance)
            {
                if (m_Wrapper.m_CubeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICubeActions instance)
            {
                foreach (var item in m_Wrapper.m_CubeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CubeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CubeActions @Cube => new CubeActions(this);
        public interface ICubeActions
        {
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
